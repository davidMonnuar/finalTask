RobotSystem demo1Sys
Dispatch cmd : cmd(X)
Dispatch sonar : sonar(SONARNAME,TARGETNAME,DISTANCE)

Event local_inputcmd : usercmd(X)	
Event local_sonara : sonara(X)	
Event local_sonarb : sonarb(X)				
Event alarm : alarm(X)					
  
Context cxt_demo1Robot ip [ host="172.20.10.3" port=8079 ] 
Context cxt_demo1RemoteConsole ip [ host="172.20.10.2" port=8089 ]  -g white -standalone 
Context cxt_demo1SonarA ip [ host="172.20.10.5" port=8099 ] -standalone 
Context cxt_demo1SonarB ip [ host="172.20.10.4" port=8069 ] -standalone 

QActor qademo1console context cxt_demo1RemoteConsole {
	Plan init normal
		println("#######Start Remote Console########");
		actorOp addCmd;
		switchToPlan sendUserCommands
	 
	Plan sendUserCommands
	 	sense time(100000) local_inputcmd -> continue ; 
	 	printCurrentEvent;
	 	onEvent local_inputcmd : usercmd( start ) -> forward qrdemo1robot -m cmd : cmd( start );
	 	onEvent local_inputcmd : usercmd( alarm ) -> emit alarm : alarm(X);
	 	repeatPlan
}
QActor qademo1sonara context cxt_demo1SonarA {
/*	SONAR FISICO */	
	Rules {
		
		valutaD( D ) :- eval( gt, D, 251 ),!.
		valutaD( D ) :- !,assert( dwb(D) ).
		valutaD( D ).
	}
	
	Plan init normal
	 	println("#############Start SonarA##########");
	 	actorOp startSonarC;
	 	switchToPlan sendDistance
 	Plan sendDistance       
		actorOp getDistanceFromSonar ;
		[ ?? d(D)] demo valutaD(D) ;
		[ !? dwb(D)] forward qrdemo1robot -m sonar : sonar(sonara,qrdemo1robot,D);
 		[ ?? dwb(R)] println( distanza( R ));
 		repeatPlan 

/*	SONAR MOCK */
/*	Plan init normal
	 	println("#############Start SonarA##########");
		actorOp addCmd;
	 	switchToPlan sendDistance
 	Plan sendDistance       
		sense time(100000) local_sonara -> continue ; 
	 	printCurrentEvent;
	 	onEvent local_sonara : sonara( D ) -> forward qrdemo1robot -m sonar : sonar(sonara,qrdemo1robot,D) ;
		repeatPlan 
*/
}
QActor qademo1sonarb context cxt_demo1SonarB {
/*	SONAR FISICO */
	Rules {
		
		valutaD( D ) :- eval( gt, D, 251 ),!.
		valutaD( D ) :- !,assert( dwb(D) ).
		valutaD( D ).
	}
	Plan init normal
	 	println("#############Start SonarB##########");
	 	actorOp startSonarC;     
		switchToPlan sendDistance
	Plan sendDistance 
		actorOp getDistanceFromSonar ;
		[ ?? d(D)] demo valutaD(D) ;
		[ !? dwb(D)] forward qrdemo1robot -m sonar : sonar(sonarb,qrdemo1robot,D);
 		[ ?? dwb(R)] println( distanza( R ));
 		repeatPlan

/*	SONAR MOCK */
/*	Plan init normal
	 	println("#############Start SonarB##########");
		actorOp addCmd;
	 	switchToPlan sendDistance
 	Plan sendDistance       
		sense time(100000) local_sonarb -> continue ; 
	 	printCurrentEvent;
	 	onEvent local_sonarb : sonarb( D ) -> forward qrdemo1robot -m sonar : sonar(sonarb,qrdemo1robot,D) ;
		repeatPlan 

*/
}

Robot nano0 QActor qrdemo1robot context cxt_demo1Robot 
{
	Rules {
		distB( D ) :- distA( C ), eval( lt, D, C ), !, assert( minore( B, A ) ).
		distB( D ) :- distA( C ), eval( gt, D, C ), !, assert( maggiore( B, A ) ).
		distB( D ) :- distA( D ), !, assert( uguale( A, B ) ).
		distB( D ).
	}
	Plan init normal
	 	println("#######Start Robot########");
	 	switchToPlan receiveCmd
	/*	STEP 1 REQUIRED 1) starts the robot (already put in A) when the user sends to it a start command by using a remote console;*/
	Plan receiveCmd
	 	receiveMsg time (20000) -m cmd sender qademo1console  content cmd(X);
	 	onMsg cmd : cmd(start) -> switchToPlan receiveSonarADistance;
		repeatPlan
	/*	STEP 1 REQUIRED 2) drives the robot along a straight path from A to B if no obstacle is detected;*/	 	
	/*	STEP 1 REQUIRED 5) stops the robot if an alarm event occurs.*/
	Plan receiveSonarADistance
	 	receiveMsg time (20000) -m sonar sender qademo1sonara content sonar(sonara,qrdemo1robot,D);
	 	onMsg sonar : sonar(sonara,qrdemo1robot,F) -> println(distdia( F ));
	 	onMsg sonar : sonar(sonara,qrdemo1robot,S) -> addRule distA(S);
	 	onMsg sonar : sonar(sonara,qrdemo1robot,D) -> switchToPlan startRobot;
	 	repeatPlan
	 			
	Plan receiveSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qademo1sonarb content sonar(sonarb,qrdemo1robot,D) react 
	 		event alarm -> stopRobot;
	 	onMsg sonar : sonar(sonarb,qrdemo1robot,F) ->println(distinizialedib( F ));
	 	onMsg sonar : sonar(sonarb,qrdemo1robot,F) -> demo distB( F );
	 	[!? minore( B, A )] println( lt(A, B));
	 	[?? minore( B, A )] switchToPlan rightRobot;
	 	[!? maggiore( B, A )] println( gt(A, B));
	 	[?? maggiore( B, A )] switchToPlan leftRobot;
	 	[!? uguale( A, B )] println( ug(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
	Plan valueSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qademo1sonarb content sonar(sonarb,qrdemo1robot,D) react 
	 		event alarm -> stopRobot;
	 	onMsg sonar : sonar(sonarb,qrdemo1robot,F) ->println(distdib( F ));
	 	onMsg sonar : sonar(sonarb,qrdemo1robot,F) -> demo distB( F );
	 	[!? uguale( A, B )] println( ug(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
					
	Plan startRobot
	 	println ("#######Robot go to point B#######");
	 	robotForward speed (60) time (0) react event alarm-> stopRobot;
	 	switchToPlan receiveSonarBDistance
	 
	Plan leftRobot
	 	robotLeft speed(60) time(1500);	 	
	 	println ("#######Robot LEFT#######");
	 	robotForward speed (60) time (0) react event alarm-> stopRobot;
		switchToPlan valueSonarBDistance
	Plan rightRobot
	 	robotRight speed(60) time(1500);
	 	println ("#######Robot RIGHT#######");
	 	robotForward speed (60) time (0) react event alarm-> stopRobot;
	 	switchToPlan valueSonarBDistance
	Plan stopRobot
	 	robotStop speed(0) time(0);
	 	println ("#######Robot Stop#######");
	 	delay time (100000);
	 	endQActor "#######Robot End#######"
}
