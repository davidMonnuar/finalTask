RobotSystem paSys
Dispatch cmd : cmd(X)
Dispatch sonar : sonar(SONARNAME,TARGETNAME,DISTANCE)

Event local_inputcmd : usercmd(X)				
Event alarm : alarm(X)					
/*
Event usercmd           : usercmd(robotgui(CMD)) 	//(FORWARD button) CMD w(low)
Event sonarDetect 		: sonarDetect(X)			//From (virtual robot) sonar

Event endplay           : endplay     
  */             
  
Context cxt_paRobot ip [ host="192.168.137.1" port=8079 ]  -g cyan 
Context cxt_paRemoteConsole ip [ host="192.168.137.1" port=8089 ]  -g white -standalone 
Context cxt_paSonarA ip [ host="192.168.137.1" port=8099 ] -g blue -standalone 
Context cxt_paSonarB ip [ host="192.168.137.2" port=8069 ] -standalone 

QActor qapaconsole context cxt_paRemoteConsole {
	Plan init normal
		println("#######Start Remote Console########");
		actorOp addCmd;
		switchToPlan sendUserCommands
	 
	Plan sendUserCommands
	 	sense time(100000) local_inputcmd -> continue ; 
	 	printCurrentEvent;
	 	onEvent local_inputcmd : usercmd( start ) -> forward qrparobot -m cmd : cmd( start );
	 	onEvent local_inputcmd : usercmd( alarm ) -> emit alarm : alarm(X);
	 	repeatPlan
}
QActor qapasonara context cxt_paSonarA {
	//alle cose commentate vanno tolti i commenti e sostituito 50 con D per rendere il sonar A reale
	Rules {
		
		valutaD( D ) :- eval( gt, D, 251 ),!.
		valutaD( D ) :- !,assert( dwb(D) ).
		valutaD( D ).
	}
	Plan init normal
	 	println("#############Start SonarA##########");
	 //	actorOp startSonarC;
	 	switchToPlan sendDistance
 	Plan sendDistance       
	//	actorOp getDistanceFromSonar ;
	//	[ !? d(D)] demo valutaD(D) ;
	//	[ !? dwb(D)]
		forward qrparobot -m sonar : sonar(sonara,qrparobot,50) ;
		delay time(300);
 	//	[ ?? dwb(R)] println( distanza( R ));
 		repeatPlan
}
QActor qapasonarb context cxt_paSonarB {
	Rules {
		
		valutaD( D ) :- eval( gt, D, 251 ),!.
		valutaD( D ) :- !,assert( dwb(D) ).
		valutaD( D ).
	}
	Plan init normal
	 	println("#############Start SonarB##########");
	 	actorOp startSonarC;     
		switchToPlan sendDistance
	Plan sendDistance 
		actorOp getDistanceFromSonar ;
		[ ?? d(D)] demo valutaD(D) ;
		[ !? dwb(D)] forward qrparobot -m sonar : sonar(sonarb,qrparobot,D) ;
 		[ ?? dwb(R)] println( distanza( R ));
 	//	delay time(300);
 		repeatPlan
}

Robot mocksimple QActor qrparobot context cxt_paRobot 
{
	Rules {
		distB( D ) :- distA( C ), eval( lt, D, C ), !, assert( minore( B, A ) ).
		distB( D ) :- distA( C ), eval( gt, D, C ), !, assert( maggiore( B, A ) ).
		distB( D ) :- distA( D ), !, assert( uguale( A, B ) ).
		distB( D ).
	}
	Plan init normal
	 	println("#######Start Robot########");
	 	switchToPlan receiveCmd
	
	Plan receiveCmd
	 	receiveMsg time (20000) -m cmd sender qapaconsole  content cmd(X);
	 	onMsg cmd : cmd(start) -> switchToPlan receiveSonarADistance;
		repeatPlan
	 	
	Plan receiveSonarADistance
	 	receiveMsg time (20000) -m sonar sender qapasonara content sonar(sonara,qrparobot,D);
	 	onMsg sonar : sonar(sonara,qrparobot,F) -> println(distdia( F ));
	 	onMsg sonar : sonar(sonara,qrparobot,S) -> addRule distA(S);
	 	onMsg sonar : sonar(sonara,qrparobot,D) -> switchToPlan startRobot;
	 	repeatPlan
	 			
	Plan receiveSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qapasonarb content sonar(sonarb,qrparobot,D);
	 	onMsg sonar : sonar(sonarb,qrparobot,F) ->println(distinizialedib( F ));
	 	onMsg sonar : sonar(sonarb,qrparobot,F) -> demo distB( F );
	 	[!? minore( B, A )] println( lt(A, B));
	 	[?? minore( B, A )] switchToPlan leftRobot;
	 	[!? maggiore( B, A )] println( gt(A, B));
	 	[?? maggiore( B, A )] switchToPlan rightRobot;
	 	[!? uguale( A, B )] println( ug(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
	Plan valueSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qapasonarb content sonar(sonarb,qrparobot,D);
	 	onMsg sonar : sonar(sonarb,qrparobot,F) ->println(distdib( F ));
	 	onMsg sonar : sonar(sonarb,qrparobot,F) -> demo distB( F );
	 	[!? uguale( A, B )] println( ug(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
					
	Plan startRobot
	 	println ("#######Robot go to point B#######");
	 	robotForward speed (100) time (0) react event alarm-> stopRobot;
	 	switchToPlan receiveSonarBDistance
	 
	Plan leftRobot
	 	robotLeft speed(100) time(1000);
	 	println ("#######Robot LEFT#######");
	 	robotForward speed (100) time (0) react event alarm-> stopRobot;
		switchToPlan valueSonarBDistance
	Plan rightRobot
	 	robotRight speed(100) time(1000);
	 	println ("#######Robot RIGHT#######");
	 	robotForward speed (100) time (0) react event alarm-> stopRobot;
	 	switchToPlan valueSonarBDistance
	Plan stopRobot
	 	robotStop speed(0) time(0);
	 	println ("#######Robot Stop#######");
	 	delay time (100000);
	 	endQActor "#######Robot End#######"
}
