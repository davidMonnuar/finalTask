/* Generated by AN DISI Unibo */ 
package it.unibo.qapasonara;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.ActorTerminationMessage;
import it.unibo.qactors.QActorMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.contactEvent.interfaces.IEventItem;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.ActionReceiveTimed;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;


//REGENERATE AKKA: QActor instead QActorPlanned
public abstract class AbstractQapasonara extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	//protected IMsgQueue mysupport ;  //defined in QActor
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction  action;
	
			protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
				return outEnvView;
			}
	
	
		public AbstractQapasonara(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/qapasonara/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/qapasonara/plans.txt";
			//Plan interpretation is done in Prolog
			//if(planFilePath != null) planUtils.buildPlanTable(planFilePath);
	 	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
	 		initSensorSystem();
			boolean res = init();
			//println(getName() + " doJob " + res );
			QActorContext.terminateQActorSystem(this);
		} 
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/
	    public boolean init() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "init";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "init";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"#############Start SonarA##########\"";
	    		println( temporaryStr );  
	    		//parg = "actorOp(startSonarC)"; //JUNE2017
	    		parg = "startSonarC";
	    		//ex solveGoalReactive JUNE2017
	    		aar = actorOpExecuteReactive(parg,3600000,"","");
	    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    		if( aar.getInterrupted() ){
	    			curPlanInExec   = "init";
	    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
	    			if( ! aar.getGoon() ) break;
	    		} 			
	    		else{
	    		//Store actorOpDone with the result
	    		 	String gg = "storeActorOpResult( X, Y )".replace("X", parg).replace("Y",aar.getResult() );
	    		 	//System.out.println("actorOpExecute gg=" + gg );
	    			 	 	pengine.solve(gg+".");			
	    		}
	    		
	    		if( ! planUtils.switchToPlan("reciveMsg").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=init WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean reciveMsg() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "reciveMsg";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "reciveMsg";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"#######ReceiveMsg SonarA########\"";
	    		println( temporaryStr );  
	    		if( ! checkInMsgQueue() ){
	    			//ReceiveMsg
	    					 aar  = planUtils.receiveMsg(mysupport,
	    					 "getdistance" ,"MSGTYPE", 
	    					 "qrparobot",this.getName(), 
	    					 "getdistance(start)","MSGNUM", 20000, "" , "");	//could block
	    					//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    					if( aar.getInterrupted() ){
	    						curPlanInExec   = "reciveMsg";
	    						if( aar.getTimeRemained() <= 0 ) addRule("tout(ReceiveMsg,"+getName()+")");
	    						if( ! aar.getGoon() ) break;
	    					} 			
	    				    if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
	    				    	//println("	WARNING: receivemsg timeout " + aar.getTimeRemained());
	    				    	addRule("tout(receivemsg,"+getName()+")");
	    				    }
	    		}
	    		printCurrentMessage(false);
	    		//onMsg
	    		if( currentMessage.msgId().equals("getdistance") ){
	    			String parg = "";
	    			/* SwitchPlan */
	    			parg =  updateVars(  Term.createTerm("getdistance(S)"), Term.createTerm("getdistance(start)"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    				if( parg != null ){
	    					 if( ! planUtils.switchToPlan("sendDistance").getGoon() ) break; 
	    				}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
	    		}if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=reciveMsg WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean sendDistance() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "sendDistance";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "sendDistance";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"#######Send Distance SonarA########\"";
	    		println( temporaryStr );  
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"sonar(SONARNAME,TARGETNAME,DISTANCE)","sonar(sonara,qrparobot,50)", guardVars ).toString();
	    		sendMsg("sonar","qrparobot", QActorContext.dispatch, temporaryStr ); 
	    		//we should restore nPlanIter and curPlanInExec of the 'interrupted' plan ???
	    		returnValue = continueWork;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=sendDistance WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	    
	 
		/* 
		* ------------------------------------------------------------
		* APPLICATION ACTIONS
		* ------------------------------------------------------------
		*/
		/* 
		* ------------------------------------------------------------
		* QUEUE  
		* ------------------------------------------------------------
		*/
		    protected void getMsgFromInputQueue(){
	//	    	println( " %%%% getMsgFromInputQueue" ); 
		    	QActorMessage msg = mysupport.getMsgFromQueue(); //blocking
	//	    	println( " %%%% getMsgFromInputQueue continues with " + msg );
		    	this.currentMessage = msg;
		    }
	  }
	
