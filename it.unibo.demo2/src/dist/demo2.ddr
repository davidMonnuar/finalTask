RobotSystem demo2Sys
Dispatch cmd : cmd(X)
Dispatch sonar : sonar(SONARNAME,TARGETNAME,DISTANCE)

Event local_inputcmd : usercmd(X)
Event local_sonara : sonara(X)
Event local_sonarb : sonarb(X)
Event obstacle : obstacle(X)				
Event alarm : alarm(X)					
  
Context ctx_demo2Robot ip [ host="172.20.10.3" port=8079 ]  
Context ctx_demo2RemoteConsole ip [ host="172.20.10.2" port=8089 ]  -g white -standalone 
Context ctx_demo2SonarA ip [ host="172.20.10.5" port=8099 ] -standalone 
Context ctx_demo2SonarB ip [ host="172.20.10.4" port=8069 ] -standalone 

QActor qademo2console context ctx_demo2RemoteConsole {
	Plan init normal
		println("#######Start Remote Console########");
		actorOp addCmd;
		switchToPlan sendUserCommands
	/*	STEP 1 REQUIRED 1) starts the robot (already put in A) when the user sends to it a start command by using a remote console; */
	Plan sendUserCommands
	 	sense time(100000) local_inputcmd -> continue ; 
	 	printCurrentEvent;
	 	onEvent local_inputcmd : usercmd( start ) -> forward qrdemo2robot -m cmd : cmd( start );
	 	onEvent local_inputcmd : usercmd( alarm ) -> emit alarm : alarm(X);
	 	repeatPlan
}
QActor qademo2sonara context ctx_demo2SonarA {
/*	SONAR FISICO */	
	Rules {
		
		valutaD( D ) :- eval( gt, D, 251 ),!.
		valutaD( D ) :- !,assert( dwb(D) ).
		valutaD( D ).
	}
	
	Plan init normal
	 	println("#############Start SonarA##########");
	 	actorOp startSonarC;
	 	switchToPlan sendDistance
 	Plan sendDistance       
		actorOp getDistanceFromSonar ;
		[ ?? d(D)] demo valutaD(D) ;
		[ !? dwb(D)] forward qrdemo2robot -m sonar : sonar(sonara,qrdemo2robot,D) ;
 		[ ?? dwb(R)] println( distanza( R ));
 		repeatPlan 

/*	SONAR MOCK */
/*	Plan init normal
	 	println("#############Start SonarA##########");
		actorOp addCmd;
	 	switchToPlan sendDistance
 	Plan sendDistance       
		sense time(100000) local_sonara -> continue ; 
	 	printCurrentEvent;
	 	onEvent local_sonara : sonara( D ) -> forward qrdemo2robot -m sonar : sonar(sonara,qrdemo2robot,D) ;
		repeatPlan 
*/
}
QActor qademo2sonarb context ctx_demo2SonarB {
/*	SONAR FISICO */
	Rules {
		
		valutaD( D ) :- eval( gt, D, 251 ),!.
		valutaD( D ) :- !,assert( dwb(D) ).
		valutaD( D ).
	}
	Plan init normal
	 	println("#############Start SonarB##########");
	 	actorOp startSonarC;     
		switchToPlan sendDistance
	Plan sendDistance 
		actorOp getDistanceFromSonar ;
		[ ?? d(D)] demo valutaD(D) ;
		[ !? dwb(D)] forward qrdemo2robot -m sonar : sonar(sonarb,qrdemo2robot,D) ;
 		[ ?? dwb(R)] println( distanza( R ));
 		repeatPlan

/*	SONAR MOCK */
/*	Plan init normal
	 	println("#############Start SonarB##########");
		actorOp addCmd;
	 	switchToPlan sendDistance
 	Plan sendDistance       
		sense time(100000) local_sonarb -> continue ; 
	 	printCurrentEvent;
	 	onEvent local_sonarb : sonarb( D ) -> forward qrdemo2robot -m sonar : sonar(sonarb,qrdemo2robot,D) ;
		repeatPlan 
*/
}

Robot nano0 QActor qrdemo2robot context ctx_demo2Robot 
{
	Rules {
		checkAdist( D ) :- distA( C ), eval( lt, C, D ), !, assert( minore( A, MAX ) ).
		checkAdist( D ) :- distA( C ), eval( gt, C, D ), !, assert( maggiore( A, MAX ) ).
		checkAdist( D ) :- distA( D ), !, assert( uguale( A, MAX ) ).		
		checkAdist( D ).
		
		distB( D ) :- distA( C ), eval( lt, D, C ), !, assert( minore( B, A ) ).
		distB( D ) :- distA( C ), eval( gt, D, C ), !, assert( maggiore( B, A ) ).
		distB( D ) :- distA( D ), !, assert( uguale( A, B ) ).
		distB( D ).
	}
	
	Plan init normal
	 	println("#######Start Robot########");
	 	switchToPlan receiveCmd
	/*	STEP 1 REQUIRED 1) starts the robot (already put in A) when the user sends to it a start command by using a remote console;*/
	Plan receiveCmd
	 	receiveMsg time (20000) -m cmd sender qademo2console  content cmd(X);
	 	onMsg cmd : cmd(start) -> switchToPlan receiveSonarADistance;
		repeatPlan
	/*	STEP 1 REQUIRED 1) starts the robot (already put in A) when the user sends to it a start command by using a remote console;*/
	/*	STEP 1 REQUIRED 2) drives the robot along a straight path from A to B if no obstacle is detected;*/
	Plan receiveSonarADistance
	 	receiveMsg time (20000) -m sonar sender qademo2sonara content sonar(sonara,qrdemo2robot,D);
	 	onMsg sonar : sonar(sonara,qrdemo2robot,F) -> println(distdia( F ));
	 	onMsg sonar : sonar(sonara,qrdemo2robot,S) -> addRule distA(S);
	 	onMsg sonar : sonar(sonara,qrdemo2robot,D) -> switchToPlan startRobot;
	 	repeatPlan
	Plan receiveSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qademo2sonarb content sonar(sonarb,qrdemo2robot,D) react
	 	 event alarm-> stopRobot
	 	 or event obstacle -> handleObstacle;
	 	onMsg sonar : sonar(sonarb,qrdemo2robot,F) ->println(distinizialedib( F ));
	 	onMsg sonar : sonar(sonarb,qrdemo2robot,F) -> demo distB( F );
	 	[!? minore( B, A )] println( lt(A, B));
	 	[?? minore( B, A )] switchToPlan rightRobot;
	 	[!? maggiore( B, A )] println( gt(A, B));
	 	[?? maggiore( B, A )] switchToPlan leftRobot;
	 	[!? uguale( A, B )] println( eq(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
	Plan valueSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qademo2sonarb content sonar(sonarb,qrdemo2robot,D)react
	 	 event alarm-> stopRobot
	 	 or event obstacle -> stopRobot;
	 	onMsg sonar : sonar(sonarb,qrdemo2robot,F) ->println(distdib( F ));
	 	onMsg sonar : sonar(sonarb,qrdemo2robot,F) -> demo distB( F );
	 	[!? uguale( A, B )] println( ug(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
	/*	STEP 1 REQUIRED 1) starts the robot (already put in A) when the user sends to it a start command by using a remote console;*/
	/*	STEP 1 REQUIRED 2) drives the robot along a straight path from A to B if no obstacle is detected;*/
	Plan startRobot
	 	println ("#######Robot go to point B#######");
	 	robotForward speed (60) time (0) react
	 	 event alarm-> stopRobot
	 	 or event obstacle -> handleObstacle;
	 	switchToPlan receiveSonarBDistance	 
	Plan leftRobot
	 	robotLeft speed(60) time(1500);	 	
	 	println ("#######Robot LEFT#######");
	 	robotForward speed (60) time (0) react
	 	 event alarm-> stopRobot
	 	 or event obstacle -> stopRobot;
		switchToPlan valueSonarBDistance
	Plan rightRobot
	 	robotRight speed(60) time(1500);
	 	println ("#######Robot RIGHT#######");
	 	robotForward speed (60) time (0)react
	 	 event alarm-> stopRobot
	 	 or event obstacle -> stopRobot;
	 	switchToPlan valueSonarBDistance
	/*	STEP 1 REQUIRED 5) stops the robot if an alarm event occurs.*/
	Plan stopRobot
	 	robotStop speed(0) time(0);
	 	println ("#######Robot Stop#######");
	 	delay time (100000);
	 	endQActor "#######Robot End#######"
	/*	STEP 1 REQUIRED 3) avoids the mobile obstacle by waiting (when detected) that the obstacle disappears from the robot's front;*/
	/*	STEP 1 REQUIRED 4) avoids the fixed obstacles by finding some alternative path to reach its goal;*/
	Plan handleObstacle
	 	println ("#######!!!WARNING OBSTACLE!!!#######");
	 	robotStop speed (0) time (0);
	 	delay time(3000) react 
	 		event alarm -> stopRobot;
	 	sense time(500) obstacle-> continue;
	 	onEvent obstacle : obstacle(D) -> switchToPlan handleFixedObstacle;
		switchToPlan handleMobileObstacle
	Plan handleMobileObstacle
	 	println ("#######!!!MOBILE OBSTACLE!!!#######");
	 	switchToPlan startRobot
	/*	STEP 1 REQUIRED 4) avoids the fixed obstacles by finding some alternative path to reach its goal;*/
	Plan handleFixedObstacle
	 	println ("#######!!!FIXED OBSTACLE!!!#######");
	 	demo checkAdist (125);
	 	[!? minore( A, MAX )] println( lt( A, MAX ));
	 	[?? minore( A, MAX )] switchToPlan avoidFixedObstacleRight;
	 	[!? maggiore( A, MAX )] println( gt( A, MAX ));
	 	[?? maggiore( A, MAX )] switchToPlan avoidFixedObstacleLeft;
	 	[!? uguale( A, MAX )] println( eq( A, MAX ));
	 	[?? uguale( A, MAX )] switchToPlan avoidFixedObstacleLeft
	Plan avoidFixedObstacleLeft
	 	println ("#######!!!TRY AVOID OBSTACLE ON THE LEFT!!!#######");
	 	robotLeft speed (60) time (1500);
	 	robotForward speed(60) time(2500) react
		 	event alarm-> stopRobot
		 	or event obstacle -> changeToRight;
	 	robotRight speed (60) time (1500);
	 	sense time(2000) obstacle-> continue;
	 	onEvent obstacle : obstacle(D) -> repeatPlan;
		switchToPlan startRobot
	 Plan avoidFixedObstacleRight
	 	println ("#######!!!TRY AVOID OBSTACLE ON THE RIGHT!!!#######");
	 	robotRight speed (60) time (1500);
	 	robotForward speed(60) time(2500) react
		 	event alarm-> stopRobot
		 	or event obstacle -> changeToLeft;
	 	robotLeft speed (60) time (1500);
	 	sense time(2000) obstacle-> continue;
	 	onEvent obstacle : obstacle(D) -> repeatPlan;
		switchToPlan startRobot
	 Plan changeToLeft
	 	println ("#######!!!CHANGE ON LEFT!!!#######");
	 	delay time(2000) react
	 		event alarm-> stopRobot;
	 	robotLeft speed (60) time (1700);
		switchToPlan avoidFixedObstacleLeft
	  Plan changeToRight
	 	println ("#######!!!CHANGE ON RIGHT!!!#######");
	 	delay time(2000) react
	 		event alarm-> stopRobot;
	 	robotRight speed (60) time (1700);
		switchToPlan avoidFixedObstacleRight
	 	 		
	
}