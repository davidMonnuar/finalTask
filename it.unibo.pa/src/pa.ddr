RobotSystem paSys
Dispatch cmd : cmd(X)
Dispatch sonar : sonar(SONARNAME,TARGETNAME,DISTANCE)

/*Event inputcmd          : usercmd(X)				//(RUN button)
Event usercmd           : usercmd(robotgui(CMD)) 	//(FORWARD button) CMD w(low)
Event sonarDetect 		: sonarDetect(X)			//From (virtual robot) sonar
Event alarm             : alarm(X)					//(FIRE button)
Event endplay           : endplay     
  */             
Context cxt_paRobot ip [ host="localhost" port=8079 ]  -g cyan
Context cxt_paRemoteConsole ip [ host="localhost" port=8089 ]  -g white
Context cxt_paSonar ip [ host="localhost" port=8099 ]  -g green


QActor qapaconsole context cxt_paRemoteConsole {
	Plan init normal
		println("#######Start Remote Console Mock########");
		delay time (3000);
		println("#####Send Cmd Remote Console Mock#######");
	 	switchToPlan send;
	 	println("#######Stop Remote Console Mock#########");
	 	delay time (100000)
	 
	Plan send
	 	forward qrparobot -m cmd : cmd(start);
	 	resumeLastPlan
}
QActor qapasonar context cxt_paSonar {
	Plan init normal
	 	println("#############Start Sonar Mock##########");
		delay time(4000);
		println("#########Sonar Mock Send distance######");
	 	switchToPlan send;
	 	switchToPlan sendFinal
	Plan send resumeLastPlan
	 	forward qrparobot -m sonar : sonar(sonara,qrparobot,50);
	 	println("#######SendA Robot########");
	 	forward qrparobot -m sonar : sonar(sonarb,qrparobot,100);
	 	println("#######SendB Robot########");
	 	delay time(1000);
	 	repeatPlan 6
	Plan sendFinal resumeLastPlan
	 	forward qrparobot -m sonar : sonar(sonara,qrparobot,50);
	 	println("#######SendA Robot########");
	 	forward qrparobot -m sonar : sonar(sonarb,qrparobot,50);
	 	println("#######SendB Robot 50########");
	 	delay time(1000);
	 	repeatPlan 
}

Robot mocksimple QActor qrparobot context cxt_paRobot 
{
	Rules {
		distB( D ) :- distA( C ), eval( lt, D, C ), !, assert( minore( B, A ) ).
		distB( D ) :- distA( C ), eval( gt, D, C ), !, assert( maggiore( B, A ) ).
		distB( D ) :- distA( D ), !, assert( uguale( A, B ) ).
		distB( D ).
	}
	Plan init normal
	 	println("#######Start Robot########");
	 	switchToPlan receiveCmd
	
	Plan receiveCmd
	 	println("#######ReceiveCmd Robot########");
	 	receiveMsg time (20000) -m cmd sender qapaconsole  content cmd(start);
	// 	[!? tout(R,W)]  endPlan "Error receive"; //test per lettura messaggio
	 	onMsg cmd : cmd(start) -> switchToPlan reciveSonarADistance;
		repeatPlan
	 	
	Plan reciveSonarADistance
	 	receiveMsg time (20000) -m sonar sender qapasonara content sonara;
	 	onMsg sonar : sonar(sonara,qrparobot,F) -> println(distdia( F ));
	 	onMsg sonar : sonar(sonara,qrparobot,S) -> addRule distA(S);
	 	onMsg sonar : sonar(sonara,qrparobot,D) -> switchToPlan startRobot;
	 	repeatPlan
	 		 		
	Plan reciveSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qapasonarb content sonarb;
	 	onMsg sonar : sonar(sonarb,qrparobot,F) ->println(distinizialedib( F ));
	 	onMsg sonar : sonar(sonarb,qrparobot,F) -> demo distB( F );
	 	[!? minore( B, A )] println( lt(A, B));
	 	[?? minore( B, A )] switchToPlan leftRobot;
	 	[!? maggiore( B, A )] println( gt(A, B));
	 	[?? maggiore( B, A )] switchToPlan rightRobot;
	 	[!? uguale( A, B )] println( ug(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
	Plan valueSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qapasonarb content sonarb;
	 	onMsg sonar : sonar(sonarb,qrparobot,F) ->println(distdib( F ));
	 	onMsg sonar : sonar(sonarb,qrparobot,F) -> demo distB( F );
	 	[!? uguale( A, B )] println( ug(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
	
	Plan startRobot
	 	println ("#######Robot go to point B#######");
	 	robotForward speed (100) time (0);
	 	switchToPlan reciveSonarBDistance
	Plan leftRobot
	 	robotLeft speed(100) time(1000);
	 	println ("#######Robot LEFT#######");
	 	robotForward speed (100) time (0);
		switchToPlan valueSonarBDistance
	Plan rightRobot
	 	robotRight speed(100) time(1000);
	 	println ("#######Robot RIGHT#######");
	 	robotForward speed (100) time (0);
	 	switchToPlan valueSonarBDistance 	
	Plan stopRobot
	 	robotStop speed(0) time(0);
	 	println ("#######Robot Stop#######");
	 	delay time (100000);
	 	endQActor "#######Robot End#######"
}
