/* Generated by AN DISI Unibo */ 
package it.unibo.qrstep2robot;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.QActorContext;

//
public class Qrstep2robot extends AbstractQrstep2robot { 
	private long currentMove = 0;
	private String currentMoveCmd = "";
	private long avoidObstacleMove = 0;
	private long tempAvoidObstacleMove = 0;
	private long changeAvoidObstacleMove = 0;
	private boolean avoidObstacleLeft = false;
	private boolean avoidObstacleright = false;
	private String currentAvoidObstacleMoveCmd = "";
	private int i = 0;
	public Qrstep2robot(String actorId, QActorContext myCtx, IOutputEnvView outEnvView ) throws Exception{
		super(actorId,myCtx,outEnvView ,it.unibo.qactors.QActorUtils.robotBase );
	}
	public void loadInfoMove(String m)
	{
		
		if(m.equals("f")){
			i++;
			currentMove = System.currentTimeMillis();
			currentMoveCmd=m;
		}else if(m.equals("l")){
			i++;
			currentMove = System.currentTimeMillis();
			currentMoveCmd="r";
		}else if(m.equals("r")){
			i++;
			currentMove = System.currentTimeMillis();
			currentMoveCmd="l";
		}
	}	
	public void saveMoveOnProlog()
	{
		if(i>0 && currentMove != 0 )
		{
			long stoptime = System.currentTimeMillis() - currentMove;
			addRule("returnToA("+i+","+currentMoveCmd+",60,"+stoptime+")");
			currentMove=0;
		}
	}
	public void loadInfoAvoidObstacleMove(String m)
	{
		tempAvoidObstacleMove= System.currentTimeMillis();
		if(avoidObstacleMove==0){
			currentAvoidObstacleMoveCmd=m;
		}
	}	

	public void saveTempInfoAvoidObstacleMove()
	{
		
		avoidObstacleMove = avoidObstacleMove + (tempAvoidObstacleMove -  System.currentTimeMillis());
	}	
	public void saveAvoidObstacleMoveOnProlog()
	{
		if(currentAvoidObstacleMoveCmd.equals("l") && !avoidObstacleLeft){
			i++;
			addRule("returnToA("+i+",r,60,1500)");
			i++;
			addRule("returnToA("+i+",f,60,"+avoidObstacleMove+")");
			i++;
			addRule("returnToA("+i+",l,60,1750)");
		} else if(currentAvoidObstacleMoveCmd.equals("l") && avoidObstacleLeft){
			avoidObstacleMove= avoidObstacleMove - changeAvoidObstacleMove;
			i++;
			addRule("returnToA("+i+",l,60,1750)");
			i++;
			addRule("returnToA("+i+",f,60,"+avoidObstacleMove+")");
			i++;
			addRule("returnToA("+i+",r,60,1500)");
			avoidObstacleLeft = false;
			changeAvoidObstacleMove=0;
		} else if(currentAvoidObstacleMoveCmd.equals("r") && !avoidObstacleright){
			i++;
			addRule("returnToA("+i+",l,60,1750)");
			i++;
			addRule("returnToA("+i+",f,60,"+avoidObstacleMove+")");
			i++;
			addRule("returnToA("+i+",r,60,1500)");
		} else if(currentAvoidObstacleMoveCmd.equals("r") && avoidObstacleright){
			avoidObstacleMove= avoidObstacleMove - changeAvoidObstacleMove;
			i++;
			addRule("returnToA("+i+",r,60,1500)");
			i++;
			addRule("returnToA("+i+",f,60,"+avoidObstacleMove+")");
			i++;
			addRule("returnToA("+i+",l,60,1750)");
			avoidObstacleright = false;
			changeAvoidObstacleMove=0;
		}
		avoidObstacleMove = 0;
		tempAvoidObstacleMove=0;
	}

	public void changeAvoidObstacleMove(String m)
	{
		avoidObstacleMove = avoidObstacleMove + (tempAvoidObstacleMove -  System.currentTimeMillis());
		changeAvoidObstacleMove = avoidObstacleMove;
		avoidObstacleMove=0;
		tempAvoidObstacleMove=0;
		if(m.equals("l")){
			avoidObstacleLeft = true;
		}else if(m.equals("r")){
			avoidObstacleright = true;
		}
	}	
	public void saveTotMoveOnProlog()
	{
		addRule("totMove("+i+")");
	}
	public void decI()
	{
		i--;
		addRule("totMove("+i+")");
	}
}
