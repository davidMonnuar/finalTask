\select@language {english}
\contentsline {title}{Introduction to QActors and QRobots}{1}{chapter.1}
\authcount {1}
\contentsline {author}{Antonio Natali}{1}{chapter.1}
\contentsline {section}{\numberline {1}Introduction to QActors}{6}{section.1.1}
\contentsline {subsection}{\numberline {1.1}Example: The 'hello world'}{6}{subsection.1.1.1}
\contentsline {subsection}{\numberline {1.2}QActor specification}{6}{subsection.1.1.2}
\contentsline {subsection}{\numberline {1.3}The software factory}{7}{subsection.1.1.3}
\contentsline {subsection}{\numberline {1.4}The work of the application designer}{7}{subsection.1.1.4}
\contentsline {subsection}{\numberline {1.5}Example: Actor as a finite state machine}{7}{subsection.1.1.5}
\contentsline {subsection}{\numberline {1.6}Example: Message-based interaction}{8}{subsection.1.1.6}
\contentsline {subsubsection}{\numberline {1.6.1}Testing the basicProdCons system}{9}{subsubsection.1.1.6.1}
\contentsline {section}{\numberline {2}QActor concept overview}{11}{section.1.2}
\contentsline {subsection}{\numberline {2.1}Actions }{11}{subsection.1.2.1}
\contentsline {subsubsection}{\numberline {2.1.1}The actor's \texttt {WorldTheory}.}{11}{subsubsection.1.2.1.1}
\contentsline {subsubsection}{\numberline {2.1.2}Logical actions.}{11}{subsubsection.1.2.1.2}
\contentsline {subsubsection}{\numberline {2.1.3}Physical actions.}{11}{subsubsection.1.2.1.3}
\contentsline {subsubsection}{\numberline {2.1.4}Application actions. }{12}{subsubsection.1.2.1.4}
\contentsline {subsubsection}{\numberline {2.1.5}PlanActions.}{12}{subsubsection.1.2.1.5}
\contentsline {subsection}{\numberline {2.2}Plans}{12}{subsection.1.2.2}
\contentsline {subsection}{\numberline {2.3}Messages and message-driven/message based behaviour}{12}{subsection.1.2.3}
\contentsline {subsection}{\numberline {2.4}Events and event-driven/event-based behaviour }{13}{subsection.1.2.4}
\contentsline {subsection}{\numberline {2.5}Actor programs as plans}{13}{subsection.1.2.5}
\contentsline {subsubsection}{\numberline {2.5.1}Actor programs as finite state machines (FSM)}{14}{subsubsection.1.2.5.1}
\contentsline {section}{\numberline {3}The \texttt {qa} language/metamodel.}{15}{section.1.3}
\contentsline {subsection}{\numberline {3.1}Messages and message based behaviour}{15}{subsection.1.3.1}
\contentsline {subsection}{\numberline {3.2}Send actions}{15}{subsection.1.3.2}
\contentsline {subsubsection}{\numberline {3.2.1}Forward a \textit {dispatch}: syntax}{16}{subsubsection.1.3.2.1}
\contentsline {subsubsection}{\numberline {3.2.2}Demand a \textit {request}: syntax}{16}{subsubsection.1.3.2.2}
\contentsline {subsection}{\numberline {3.3}Receive actions}{16}{subsection.1.3.3}
\contentsline {subsubsection}{\numberline {3.3.1}Generic receive with optional message specification: syntax}{16}{subsubsection.1.3.3.1}
\contentsline {subsubsection}{\numberline {3.3.2}Receive a message with a specified structure: syntax}{16}{subsubsection.1.3.3.2}
\contentsline {subsubsection}{\numberline {3.3.3}onMsg: syntax}{17}{subsubsection.1.3.3.3}
\contentsline {subsection}{\numberline {3.4}Events and event-based behaviour }{17}{subsection.1.3.4}
\contentsline {subsubsection}{\numberline {3.4.1}Emit an event: syntax}{17}{subsubsection.1.3.4.1}
\contentsline {subsubsection}{\numberline {3.4.2}Sense events: syntax}{17}{subsubsection.1.3.4.2}
\contentsline {subsubsection}{\numberline {3.4.3}OnEvent action: syntax }{17}{subsubsection.1.3.4.3}
\contentsline {subsection}{\numberline {3.5}Event handlers and event-driven behaviour }{18}{subsection.1.3.5}
\contentsline {subsection}{\numberline {3.6}Guarded actions}{19}{subsection.1.3.6}
\contentsline {subsection}{\numberline {3.7}About implementation}{20}{subsection.1.3.7}
\contentsline {subsubsection}{\numberline {3.7.1}Sending messages}{20}{subsubsection.1.3.7.1}
\contentsline {subsubsection}{\numberline {3.7.2}Receiving messages}{20}{subsubsection.1.3.7.2}
\contentsline {subsubsection}{\numberline {3.7.3}forward implementation (see Subsection~\ref {ssec:sendImpl})}{21}{subsubsection.1.3.7.3}
\contentsline {subsubsection}{\numberline {3.7.4}demand implementation (see Subsection~\ref {ssec:sendImpl})}{21}{subsubsection.1.3.7.4}
\contentsline {subsubsection}{\numberline {3.7.5}emit implementation}{21}{subsubsection.1.3.7.5}
\contentsline {subsubsection}{\numberline {3.7.6}sense implementation}{21}{subsubsection.1.3.7.6}
\contentsline {subsection}{\numberline {3.8}QActor knowledge}{21}{subsection.1.3.8}
\contentsline {subsubsection}{\numberline {3.8.1}Inspect the state and elaborate in a functional way}{22}{subsubsection.1.3.8.1}
\contentsline {subsubsection}{\numberline {3.8.2}Change the internal state}{22}{subsubsection.1.3.8.2}
\contentsline {section}{\numberline {4}Human interaction with a Qactor}{23}{section.1.4}
\contentsline {subsection}{\numberline {4.1}The (remote) Web interface}{23}{subsection.1.4.1}
\contentsline {subsection}{\numberline {4.2}The (local) GUI user interface}{23}{subsection.1.4.2}
\contentsline {section}{\numberline {5}Building qa models}{24}{section.1.5}
\contentsline {subsubsection}{\numberline {5.0.1}Application designer and System designer.}{24}{subsubsection.1.5.0.1}
\contentsline {subsection}{\numberline {5.1}QActor software factory}{24}{subsection.1.5.1}
\contentsline {section}{\numberline {6}User-defined actions in \textsf {Prolog}}{25}{section.1.6}
\contentsline {subsubsection}{\numberline {6.0.1}Examples of unification}{25}{subsubsection.1.6.0.1}
\contentsline {subsection}{\numberline {6.1}The \texttt {demo} and \texttt {solve} operation.}{25}{subsection.1.6.1}
\contentsline {subsection}{\numberline {6.2}Loading and using a user-defined theory}{25}{subsection.1.6.2}
\contentsline {subsubsection}{\numberline {6.2.1}The initialization directive.}{26}{subsubsection.1.6.2.1}
\contentsline {subsubsection}{\numberline {6.2.2}On backtracking.}{27}{subsubsection.1.6.2.2}
\contentsline {subsection}{\numberline {6.3}Using the actor in \textsf {Prolog}{} rules }{27}{subsection.1.6.3}
\contentsline {subsection}{\numberline {6.4}The operator actorOp}{28}{subsection.1.6.4}
\contentsline {subsection}{\numberline {6.5}Rules at model level}{29}{subsection.1.6.5}
\contentsline {subsection}{\numberline {6.6}From \textsf {Prolog}{} to \textsf {Java}{} again}{30}{subsection.1.6.6}
\contentsline {subsubsection}{\numberline {6.6.1}Guards as problem-solving operation.}{30}{subsubsection.1.6.6.1}
\contentsline {subsubsection}{\numberline {6.6.2}The user-defined \texttt {select/1} operation.}{30}{subsubsection.1.6.6.2}
\contentsline {subsection}{\numberline {6.7}Workflow}{34}{subsection.1.6.7}
\contentsline {subsection}{\numberline {6.8}Examples of problem solving with \textsf {tuProlog}{} }{34}{subsection.1.6.8}
\contentsline {subsubsection}{\numberline {6.8.1}configuration.}{36}{subsubsection.1.6.8.1}
\contentsline {subsubsection}{\numberline {6.8.2}family.}{36}{subsubsection.1.6.8.2}
\contentsline {subsubsection}{\numberline {6.8.3}accessData.}{37}{subsubsection.1.6.8.3}
\contentsline {subsubsection}{\numberline {6.8.4}output.}{37}{subsubsection.1.6.8.4}
\contentsline {section}{\numberline {7}Advanced Actions (observable, timed, reactive)}{38}{section.1.7}
\contentsline {subsection}{\numberline {7.1}Asynchronous Observable Actions}{38}{subsection.1.7.1}
\contentsline {subsection}{\numberline {7.2}The class \texttt {ActionObservableGeneric}}{39}{subsection.1.7.2}
\contentsline {subsubsection}{\numberline {7.2.1}\texttt {Callable<T>}}{39}{subsubsection.1.7.2.1}
\contentsline {subsubsection}{\numberline {7.2.2}\texttt {Future<T>}}{39}{subsubsection.1.7.2.2}
\contentsline {subsubsection}{\numberline {7.2.3}\texttt {execAsynch()}}{40}{subsubsection.1.7.2.3}
\contentsline {subsubsection}{\numberline {7.2.4}\texttt {Executors}}{40}{subsubsection.1.7.2.4}
\contentsline {subsubsection}{\numberline {7.2.5}\texttt {execSynch()}}{40}{subsubsection.1.7.2.5}
\contentsline {subsubsection}{\numberline {7.2.6}\texttt {T call()}}{40}{subsubsection.1.7.2.6}
\contentsline {subsubsection}{\numberline {7.2.7}\texttt {startOfAction()}}{40}{subsubsection.1.7.2.7}
\contentsline {subsubsection}{\numberline {7.2.8}\texttt {endActionInternal()}}{41}{subsubsection.1.7.2.8}
\contentsline {subsubsection}{\numberline {7.2.9}\texttt {execTheAction()} and \texttt {endOfAction()}}{41}{subsubsection.1.7.2.9}
\contentsline {subsubsection}{\numberline {7.2.10}Fibonacci as Observable}{41}{subsubsection.1.7.2.10}
\contentsline {subsubsection}{\numberline {7.2.11}Experiments on Fibonacci as Observable}{42}{subsubsection.1.7.2.11}
\contentsline {subsection}{\numberline {7.3}Timed actions}{43}{subsection.1.7.3}
\contentsline {subsubsection}{\numberline {7.3.1}\texttt {ActorTimedAction}}{43}{subsubsection.1.7.3.1}
\contentsline {subsubsection}{\numberline {7.3.2}Fibonacci as a Timed}{45}{subsubsection.1.7.3.2}
\contentsline {subsubsection}{\numberline {7.3.3}Experiments on Fibonacci as Timed}{46}{subsubsection.1.7.3.3}
\contentsline {subsection}{\numberline {7.4}Reactive actions}{48}{subsection.1.7.4}
\contentsline {subsubsection}{\numberline {7.4.1}\texttt {AsynchActionResult}}{48}{subsubsection.1.7.4.1}
\contentsline {subsubsection}{\numberline {7.4.2}Fibonacci as a Reactive}{49}{subsubsection.1.7.4.2}
\contentsline {subsubsection}{\numberline {7.4.3}Experiments on Fibonacci as Reactive}{50}{subsubsection.1.7.4.3}
\contentsline {section}{\numberline {8}An interpreter to execute actions}{51}{section.1.8}
\contentsline {subsection}{\numberline {8.1}Basic actions}{51}{subsection.1.8.1}
\contentsline {subsection}{\numberline {8.2}Guarded actions}{52}{subsection.1.8.2}
\contentsline {subsection}{\numberline {8.3}Timed actions}{52}{subsection.1.8.3}
\contentsline {subsection}{\numberline {8.4}Time out}{52}{subsection.1.8.4}
\contentsline {subsection}{\numberline {8.5}Asynchronous actions}{53}{subsection.1.8.5}
\contentsline {subsection}{\numberline {8.6}Reactive actions}{53}{subsection.1.8.6}
\contentsline {section}{\numberline {9}Interactions using \texttt {MQTT} (to be completed)}{54}{section.1.9}
\contentsline {subsection}{\numberline {9.1}The mqttTheory}{54}{subsection.1.9.1}
\contentsline {subsection}{\numberline {9.2}The MqttUtils}{55}{subsection.1.9.2}
\contentsline {section}{\numberline {10}Introduction to QRobots}{57}{section.1.10}
\contentsline {section}{\numberline {11}A model for the BaseRobot}{57}{section.1.11}
\contentsline {subsection}{\numberline {11.1}The BasicRobot class}{58}{subsection.1.11.1}
\contentsline {subsection}{\numberline {11.2}Using a BaseRobot}{59}{subsection.1.11.2}
\contentsline {subsubsection}{\numberline {11.2.1}The project workspace}{59}{subsubsection.1.11.2.1}
\contentsline {subsubsection}{\numberline {11.2.2}The code}{60}{subsubsection.1.11.2.2}
\contentsline {subsection}{\numberline {11.3}The work of the Configurator}{61}{subsection.1.11.3}
\contentsline {subsection}{\numberline {11.4}From mocks to real robots}{62}{subsection.1.11.4}
\contentsline {section}{\numberline {12}Sensors and Sensor Data}{63}{section.1.12}
\contentsline {subsubsection}{\numberline {12.0.1}Sensor data representation in Prolog (high level)}{64}{subsubsection.1.12.0.1}
\contentsline {subsubsection}{\numberline {12.0.2}Sensor data representation in Json (low level)}{64}{subsubsection.1.12.0.2}
\contentsline {subsection}{\numberline {12.1}Sensor model}{64}{subsection.1.12.1}
\contentsline {section}{\numberline {13}Actuators and Executors}{65}{section.1.13}
\contentsline {section}{\numberline {14}The QRobot }{67}{section.1.14}
\contentsline {subsection}{\numberline {14.1}Command a QRobot from a console }{68}{subsection.1.14.1}
\contentsline {subsection}{\numberline {14.2}An Avatar}{68}{subsection.1.14.2}
\contentsline {subsection}{\numberline {14.3}High Level Description of robot configuration }{69}{subsection.1.14.3}
\contentsline {subsection}{\numberline {14.4}Sensors}{71}{subsection.1.14.4}
\contentsline {subsubsection}{\numberline {14.4.1}Sensors handled by Arduino.}{72}{subsubsection.1.14.4.1}
\contentsline {subsection}{\numberline {14.5}A model of serial.}{73}{subsection.1.14.5}
\contentsline {section}{\numberline {15}Motors (to be completed)}{74}{section.1.15}
\contentsline {subsubsection}{\numberline {15.0.1}Servo}{74}{subsubsection.1.15.0.1}
\contentsline {subsubsection}{\numberline {15.0.2}The pi-blaster.}{74}{subsubsection.1.15.0.2}
\contentsline {subsubsection}{\numberline {15.0.3}Xtext installation}{75}{subsubsection.1.15.0.3}
\contentsline {section}{\numberline {16}Overcoming static configurations}{75}{section.1.16}
\contentsline {section}{\numberline {17}Dynamic creation of actors within a Context}{76}{section.1.17}
\contentsline {subsection}{\numberline {17.1}An actor-creation rule}{76}{subsection.1.17.1}
\contentsline {subsection}{\numberline {17.2}An actor-instance creator}{77}{subsection.1.17.2}
\contentsline {subsection}{\numberline {17.3}The name-creation rule}{78}{subsection.1.17.3}
\contentsline {section}{\numberline {18}Dynamic addition of Contexts}{78}{section.1.18}
\contentsline {subsection}{\numberline {18.1}A first dynamic actor}{78}{subsection.1.18.1}
\contentsline {subsection}{\numberline {18.2}A second dynamic actor}{79}{subsection.1.18.2}
\contentsline {section}{\numberline {19}The pivot }{80}{section.1.19}
\contentsline {subsection}{\numberline {19.1}The pivot application theory}{81}{subsection.1.19.1}
\contentsline {subsection}{\numberline {19.2}The pivot at start-up}{81}{subsection.1.19.2}
