\BOOKMARK [0][-]{chapter.1}{Introduction to QActors and QRobots}{}% 1
\BOOKMARK [0][-]{chapter.1}{Antonio Natali}{}% 2
\BOOKMARK [1][-]{section.1.1}{Introduction to QActors}{chapter.1}% 3
\BOOKMARK [2][-]{subsection.1.1.1}{Example: The 'hello world'}{section.1.1}% 4
\BOOKMARK [2][-]{subsection.1.1.2}{QActor specification}{section.1.1}% 5
\BOOKMARK [2][-]{subsection.1.1.3}{The software factory}{section.1.1}% 6
\BOOKMARK [2][-]{subsection.1.1.4}{The work of the application designer}{section.1.1}% 7
\BOOKMARK [2][-]{subsection.1.1.5}{Example: Actor as a finite state machine}{section.1.1}% 8
\BOOKMARK [2][-]{subsection.1.1.6}{Example: Message-based interaction}{section.1.1}% 9
\BOOKMARK [3][-]{subsubsection.1.1.6.1}{Testing the basicProdCons system}{subsection.1.1.6}% 10
\BOOKMARK [1][-]{section.1.2}{QActor concept overview}{chapter.1}% 11
\BOOKMARK [2][-]{subsection.1.2.1}{Actions }{section.1.2}% 12
\BOOKMARK [3][-]{subsubsection.1.2.1.1}{The actor's WorldTheory.}{subsection.1.2.1}% 13
\BOOKMARK [3][-]{subsubsection.1.2.1.2}{Logical actions.}{subsection.1.2.1}% 14
\BOOKMARK [3][-]{subsubsection.1.2.1.3}{Physical actions.}{subsection.1.2.1}% 15
\BOOKMARK [3][-]{subsubsection.1.2.1.4}{Application actions. }{subsection.1.2.1}% 16
\BOOKMARK [3][-]{subsubsection.1.2.1.5}{PlanActions.}{subsection.1.2.1}% 17
\BOOKMARK [2][-]{subsection.1.2.2}{Plans}{section.1.2}% 18
\BOOKMARK [2][-]{subsection.1.2.3}{Messages and message-driven/message based behaviour}{section.1.2}% 19
\BOOKMARK [2][-]{subsection.1.2.4}{Events and event-driven/event-based behaviour }{section.1.2}% 20
\BOOKMARK [2][-]{subsection.1.2.5}{Actor programs as plans}{section.1.2}% 21
\BOOKMARK [3][-]{subsubsection.1.2.5.1}{Actor programs as finite state machines \(FSM\)}{subsection.1.2.5}% 22
\BOOKMARK [1][-]{section.1.3}{The qa language/metamodel.}{chapter.1}% 23
\BOOKMARK [2][-]{subsection.1.3.1}{Messages and message based behaviour}{section.1.3}% 24
\BOOKMARK [2][-]{subsection.1.3.2}{Send actions}{section.1.3}% 25
\BOOKMARK [3][-]{subsubsection.1.3.2.1}{Forward a dispatch: syntax}{subsection.1.3.2}% 26
\BOOKMARK [3][-]{subsubsection.1.3.2.2}{Demand a request: syntax}{subsection.1.3.2}% 27
\BOOKMARK [2][-]{subsection.1.3.3}{Receive actions}{section.1.3}% 28
\BOOKMARK [3][-]{subsubsection.1.3.3.1}{Generic receive with optional message specification: syntax}{subsection.1.3.3}% 29
\BOOKMARK [3][-]{subsubsection.1.3.3.2}{Receive a message with a specified structure: syntax}{subsection.1.3.3}% 30
\BOOKMARK [3][-]{subsubsection.1.3.3.3}{onMsg: syntax}{subsection.1.3.3}% 31
\BOOKMARK [2][-]{subsection.1.3.4}{Events and event-based behaviour }{section.1.3}% 32
\BOOKMARK [3][-]{subsubsection.1.3.4.1}{Emit an event: syntax}{subsection.1.3.4}% 33
\BOOKMARK [3][-]{subsubsection.1.3.4.2}{Sense events: syntax}{subsection.1.3.4}% 34
\BOOKMARK [3][-]{subsubsection.1.3.4.3}{OnEvent action: syntax }{subsection.1.3.4}% 35
\BOOKMARK [2][-]{subsection.1.3.5}{Event handlers and event-driven behaviour }{section.1.3}% 36
\BOOKMARK [2][-]{subsection.1.3.6}{Guarded actions}{section.1.3}% 37
\BOOKMARK [2][-]{subsection.1.3.7}{About implementation}{section.1.3}% 38
\BOOKMARK [3][-]{subsubsection.1.3.7.1}{Sending messages}{subsection.1.3.7}% 39
\BOOKMARK [3][-]{subsubsection.1.3.7.2}{Receiving messages}{subsection.1.3.7}% 40
\BOOKMARK [3][-]{subsubsection.1.3.7.3}{forward implementation \(see Subsection 3.7.1\)}{subsection.1.3.7}% 41
\BOOKMARK [3][-]{subsubsection.1.3.7.4}{demand implementation \(see Subsection 3.7.1\)}{subsection.1.3.7}% 42
\BOOKMARK [3][-]{subsubsection.1.3.7.5}{emit implementation}{subsection.1.3.7}% 43
\BOOKMARK [3][-]{subsubsection.1.3.7.6}{sense implementation}{subsection.1.3.7}% 44
\BOOKMARK [2][-]{subsection.1.3.8}{QActor knowledge}{section.1.3}% 45
\BOOKMARK [3][-]{subsubsection.1.3.8.1}{Inspect the state and elaborate in a functional way}{subsection.1.3.8}% 46
\BOOKMARK [3][-]{subsubsection.1.3.8.2}{Change the internal state}{subsection.1.3.8}% 47
\BOOKMARK [1][-]{section.1.4}{Human interaction with a Qactor}{chapter.1}% 48
\BOOKMARK [2][-]{subsection.1.4.1}{The \(remote\) Web interface}{section.1.4}% 49
\BOOKMARK [2][-]{subsection.1.4.2}{The \(local\) GUI user interface}{section.1.4}% 50
\BOOKMARK [1][-]{section.1.5}{Building qa models}{chapter.1}% 51
\BOOKMARK [2][-]{subsubsection.1.5.0.1}{Application designer and System designer.}{section.1.5}% 52
\BOOKMARK [2][-]{subsection.1.5.1}{QActor software factory}{section.1.5}% 53
\BOOKMARK [1][-]{section.1.6}{User-defined actions in Prolog}{chapter.1}% 54
\BOOKMARK [2][-]{subsubsection.1.6.0.1}{Examples of unification}{section.1.6}% 55
\BOOKMARK [2][-]{subsection.1.6.1}{The demo and solve operation.}{section.1.6}% 56
\BOOKMARK [2][-]{subsection.1.6.2}{Loading and using a user-defined theory}{section.1.6}% 57
\BOOKMARK [3][-]{subsubsection.1.6.2.1}{The initialization directive.}{subsection.1.6.2}% 58
\BOOKMARK [3][-]{subsubsection.1.6.2.2}{On backtracking.}{subsection.1.6.2}% 59
\BOOKMARK [2][-]{subsection.1.6.3}{Using the actor in Prolog rules }{section.1.6}% 60
\BOOKMARK [2][-]{subsection.1.6.4}{The operator actorOp}{section.1.6}% 61
\BOOKMARK [2][-]{subsection.1.6.5}{Rules at model level}{section.1.6}% 62
\BOOKMARK [2][-]{subsection.1.6.6}{From Prolog to Java again}{section.1.6}% 63
\BOOKMARK [3][-]{subsubsection.1.6.6.1}{Guards as problem-solving operation.}{subsection.1.6.6}% 64
\BOOKMARK [3][-]{subsubsection.1.6.6.2}{The user-defined select/1 operation.}{subsection.1.6.6}% 65
\BOOKMARK [2][-]{subsection.1.6.7}{Workflow}{section.1.6}% 66
\BOOKMARK [2][-]{subsection.1.6.8}{Examples of problem solving with tuProlog }{section.1.6}% 67
\BOOKMARK [3][-]{subsubsection.1.6.8.1}{configuration.}{subsection.1.6.8}% 68
\BOOKMARK [3][-]{subsubsection.1.6.8.2}{family.}{subsection.1.6.8}% 69
\BOOKMARK [3][-]{subsubsection.1.6.8.3}{accessData.}{subsection.1.6.8}% 70
\BOOKMARK [3][-]{subsubsection.1.6.8.4}{output.}{subsection.1.6.8}% 71
\BOOKMARK [1][-]{section.1.7}{Advanced Actions \(observable, timed, reactive\)}{chapter.1}% 72
\BOOKMARK [2][-]{subsection.1.7.1}{Asynchronous Observable Actions}{section.1.7}% 73
\BOOKMARK [2][-]{subsection.1.7.2}{The class ActionObservableGeneric}{section.1.7}% 74
\BOOKMARK [3][-]{subsubsection.1.7.2.1}{Callable<T>}{subsection.1.7.2}% 75
\BOOKMARK [3][-]{subsubsection.1.7.2.2}{Future<T>}{subsection.1.7.2}% 76
\BOOKMARK [3][-]{subsubsection.1.7.2.3}{execAsynch\(\)}{subsection.1.7.2}% 77
\BOOKMARK [3][-]{subsubsection.1.7.2.4}{Executors}{subsection.1.7.2}% 78
\BOOKMARK [3][-]{subsubsection.1.7.2.5}{execSynch\(\)}{subsection.1.7.2}% 79
\BOOKMARK [3][-]{subsubsection.1.7.2.6}{T call\(\)}{subsection.1.7.2}% 80
\BOOKMARK [3][-]{subsubsection.1.7.2.7}{startOfAction\(\)}{subsection.1.7.2}% 81
\BOOKMARK [3][-]{subsubsection.1.7.2.8}{endActionInternal\(\)}{subsection.1.7.2}% 82
\BOOKMARK [3][-]{subsubsection.1.7.2.9}{execTheAction\(\) and endOfAction\(\)}{subsection.1.7.2}% 83
\BOOKMARK [3][-]{subsubsection.1.7.2.10}{Fibonacci as Observable}{subsection.1.7.2}% 84
\BOOKMARK [3][-]{subsubsection.1.7.2.11}{Experiments on Fibonacci as Observable}{subsection.1.7.2}% 85
\BOOKMARK [2][-]{subsection.1.7.3}{Timed actions}{section.1.7}% 86
\BOOKMARK [3][-]{subsubsection.1.7.3.1}{ActorTimedAction}{subsection.1.7.3}% 87
\BOOKMARK [3][-]{subsubsection.1.7.3.2}{Fibonacci as a Timed}{subsection.1.7.3}% 88
\BOOKMARK [3][-]{subsubsection.1.7.3.3}{Experiments on Fibonacci as Timed}{subsection.1.7.3}% 89
\BOOKMARK [2][-]{subsection.1.7.4}{Reactive actions}{section.1.7}% 90
\BOOKMARK [3][-]{subsubsection.1.7.4.1}{AsynchActionResult}{subsection.1.7.4}% 91
\BOOKMARK [3][-]{subsubsection.1.7.4.2}{Fibonacci as a Reactive}{subsection.1.7.4}% 92
\BOOKMARK [3][-]{subsubsection.1.7.4.3}{Experiments on Fibonacci as Reactive}{subsection.1.7.4}% 93
\BOOKMARK [1][-]{section.1.8}{An interpreter to execute actions}{chapter.1}% 94
\BOOKMARK [2][-]{subsection.1.8.1}{Basic actions}{section.1.8}% 95
\BOOKMARK [2][-]{subsection.1.8.2}{Guarded actions}{section.1.8}% 96
\BOOKMARK [2][-]{subsection.1.8.3}{Timed actions}{section.1.8}% 97
\BOOKMARK [2][-]{subsection.1.8.4}{Time out}{section.1.8}% 98
\BOOKMARK [2][-]{subsection.1.8.5}{Asynchronous actions}{section.1.8}% 99
\BOOKMARK [2][-]{subsection.1.8.6}{Reactive actions}{section.1.8}% 100
\BOOKMARK [1][-]{section.1.9}{Interactions using MQTT \(to be completed\)}{chapter.1}% 101
\BOOKMARK [2][-]{subsection.1.9.1}{The mqttTheory}{section.1.9}% 102
\BOOKMARK [2][-]{subsection.1.9.2}{The MqttUtils}{section.1.9}% 103
\BOOKMARK [1][-]{section.1.10}{Introduction to QRobots}{chapter.1}% 104
\BOOKMARK [1][-]{section.1.11}{A model for the BaseRobot}{chapter.1}% 105
\BOOKMARK [2][-]{subsection.1.11.1}{The BasicRobot class}{section.1.11}% 106
\BOOKMARK [2][-]{subsection.1.11.2}{Using a BaseRobot}{section.1.11}% 107
\BOOKMARK [3][-]{subsubsection.1.11.2.1}{The project workspace}{subsection.1.11.2}% 108
\BOOKMARK [3][-]{subsubsection.1.11.2.2}{The code}{subsection.1.11.2}% 109
\BOOKMARK [2][-]{subsection.1.11.3}{The work of the Configurator}{section.1.11}% 110
\BOOKMARK [2][-]{subsection.1.11.4}{From mocks to real robots}{section.1.11}% 111
\BOOKMARK [1][-]{section.1.12}{Sensors and Sensor Data}{chapter.1}% 112
\BOOKMARK [2][-]{subsubsection.1.12.0.1}{Sensor data representation in Prolog \(high level\)}{section.1.12}% 113
\BOOKMARK [3][-]{subsubsection.1.12.0.2}{Sensor data representation in Json \(low level\)}{subsubsection.1.12.0.1}% 114
\BOOKMARK [2][-]{subsection.1.12.1}{Sensor model}{section.1.12}% 115
\BOOKMARK [1][-]{section.1.13}{Actuators and Executors}{chapter.1}% 116
\BOOKMARK [1][-]{section.1.14}{The QRobot }{chapter.1}% 117
\BOOKMARK [2][-]{subsection.1.14.1}{Command a QRobot from a console }{section.1.14}% 118
\BOOKMARK [2][-]{subsection.1.14.2}{An Avatar}{section.1.14}% 119
\BOOKMARK [2][-]{subsection.1.14.3}{High Level Description of robot configuration }{section.1.14}% 120
\BOOKMARK [2][-]{subsection.1.14.4}{Sensors}{section.1.14}% 121
\BOOKMARK [3][-]{subsubsection.1.14.4.1}{Sensors handled by Arduino.}{subsection.1.14.4}% 122
\BOOKMARK [2][-]{subsection.1.14.5}{A model of serial.}{section.1.14}% 123
\BOOKMARK [1][-]{section.1.15}{Motors \(to be completed\)}{chapter.1}% 124
\BOOKMARK [2][-]{subsubsection.1.15.0.1}{Servo}{section.1.15}% 125
\BOOKMARK [3][-]{subsubsection.1.15.0.2}{The pi-blaster.}{subsubsection.1.15.0.1}% 126
\BOOKMARK [3][-]{subsubsection.1.15.0.3}{Xtext installation}{subsubsection.1.15.0.1}% 127
\BOOKMARK [1][-]{section.1.16}{Overcoming static configurations}{chapter.1}% 128
\BOOKMARK [1][-]{section.1.17}{Dynamic creation of actors within a Context}{chapter.1}% 129
\BOOKMARK [2][-]{subsection.1.17.1}{An actor-creation rule}{section.1.17}% 130
\BOOKMARK [2][-]{subsection.1.17.2}{An actor-instance creator}{section.1.17}% 131
\BOOKMARK [2][-]{subsection.1.17.3}{The name-creation rule}{section.1.17}% 132
\BOOKMARK [1][-]{section.1.18}{Dynamic addition of Contexts}{chapter.1}% 133
\BOOKMARK [2][-]{subsection.1.18.1}{A first dynamic actor}{section.1.18}% 134
\BOOKMARK [2][-]{subsection.1.18.2}{A second dynamic actor}{section.1.18}% 135
\BOOKMARK [1][-]{section.1.19}{The pivot }{chapter.1}% 136
\BOOKMARK [2][-]{subsection.1.19.1}{The pivot application theory}{section.1.19}% 137
\BOOKMARK [2][-]{subsection.1.19.2}{The pivot at start-up}{section.1.19}% 138
