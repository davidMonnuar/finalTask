RobotSystem demo0Sys
Dispatch cmd : cmd(X)
Dispatch sonar : sonar(SONARNAME,TARGETNAME,DISTANCE)

Event local_sonara : sonara(D)
Event local_sonarb : sonarb(D)
      
Context cxt_demo0Robot ip [ host="172.20.10.3" port=8079 ]
Context cxt_demo0RemoteConsole ip [ host="172.20.10.2" port=8089 ]  -g white
Context cxt_demo0SonarA ip [ host="172.20.10.2" port=8099 ]  -g blue -standalone 
Context cxt_demo0SonarB ip [ host="172.20.10.2" port=8069 ]  -g green -standalone 


QActor qademo0console context cxt_demo0RemoteConsole {
	Plan init normal
		println("#######Start Remote Console Mock########");
		delay time (3000);
		println("#####Send Cmd Remote Console Mock#######");
	 	switchToPlan send;
	 	println("#######Stop Remote Console Mock#########");
	 	delay time (100000)
	 
	Plan send
	 	forward qrdemo0robot -m cmd : cmd(start);
	 	resumeLastPlan
}
QActor qademo0sonara context cxt_demo0SonarA {
	Plan init normal
	 	println("#############Start SonarA##########");
		actorOp addCmd;
	 	switchToPlan sendDistance
 	Plan sendDistance       
		sense time(100000) local_sonara -> continue ; 
	 	printCurrentEvent;
	 	onEvent local_sonara : sonara( D ) -> forward qrdemo0robot -m sonar : sonar(sonara,qrdemo0robot,D) ;
		repeatPlan 
}
QActor qademo0sonarb context cxt_demo0SonarB {
		Plan init normal
	 	println("#############Start SonarB##########");
		actorOp addCmd;
	 	switchToPlan sendDistance
 	Plan sendDistance       
		sense time(100000) local_sonarb -> continue ; 
	 	printCurrentEvent;
	 	onEvent local_sonarb : sonarb( D ) -> forward qrdemo0robot -m sonar : sonar(sonarb,qrdemo0robot,D) ;
		repeatPlan 
}

Robot nano0 QActor qrdemo0robot context cxt_demo0Robot 
{
	Rules {
		distB( D ) :- distA( C ), eval( lt, D, C ), !, assert( minore( B, A ) ).
		distB( D ) :- distA( C ), eval( gt, D, C ), !, assert( maggiore( B, A ) ).
		distB( D ) :- distA( D ), !, assert( uguale( A, B ) ).
		distB( D ).
	}
	Plan init normal
	 	println("#######Start Robot########");
	 	switchToPlan receiveCmd
	/*	STEP 1 REQUIRED 1) starts the robot (already put in A) when the user sends to it a start command by using a remote console;*/
	Plan receiveCmd
	 	println("#######ReceiveCmd Robot########");
	 	receiveMsg time (20000) -m cmd sender qademo0console  content cmd(start);
	 	onMsg cmd : cmd(start) -> switchToPlan reciveSonarADistance;
		repeatPlan
	/*	STEP 1 REQUIRED 2) drives the robot along a straight path from A to B if no obstacle is detected;*/	 	
	Plan reciveSonarADistance
	 	receiveMsg time (20000) -m sonar sender qademo0sonara content sonara;
	 	onMsg sonar : sonar(sonara,qrdemo0robot,F) -> println(distdia( F ));
	 	onMsg sonar : sonar(sonara,qrdemo0robot,S) -> addRule distA(S);
	 	onMsg sonar : sonar(sonara,qrdemo0robot,D) -> switchToPlan startRobot;
	 	repeatPlan
	 		 		
	Plan reciveSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qademo0sonarb content sonarb;
	 	onMsg sonar : sonar(sonarb,qrdemo0robot,F) ->println(distinizialedib( F ));
	 	onMsg sonar : sonar(sonarb,qrdemo0robot,F) -> demo distB( F );
	 	[!? minore( B, A )] println( lt(A, B));
	 	[?? minore( B, A )] switchToPlan rightRobot;
	 	[!? maggiore( B, A )] println( gt(A, B));
	 	[?? maggiore( B, A )] switchToPlan leftRobot;
	 	[!? uguale( A, B )] println( ug(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
	Plan valueSonarBDistance
	 	receiveMsg time (20000) -m sonar sender qademo0sonarb content sonarb;
	 	onMsg sonar : sonar(sonarb,qrdemo0robot,F) ->println(distdib( F ));
	 	onMsg sonar : sonar(sonarb,qrdemo0robot,F) -> demo distB( F );
	 	[!? uguale( A, B )] println( ug(A, B));
	 	[?? uguale( A, B )] switchToPlan stopRobot;
	 	repeatPlan 
	
	Plan startRobot
	 	println ("#######Robot go to point B#######");
	 	robotForward speed (60) time (0);
	 	switchToPlan reciveSonarBDistance
	Plan leftRobot
	 	robotLeft speed(60) time(1500);
	 	println ("#######Robot LEFT#######");
	 	robotForward speed (60) time (0);
		switchToPlan valueSonarBDistance
	Plan rightRobot
	 	robotRight speed(60) time(1500);
	 	println ("#######Robot RIGHT#######");
	 	robotForward speed (60) time (0);
	 	switchToPlan valueSonarBDistance 	
	Plan stopRobot
	 	robotStop speed(0) time(0);
	 	println ("#######Robot Stop#######");
	 	delay time (100000);
	 	endQActor "#######Robot End#######"
}
